Parameters:
  Name:
    Description: Enter your name. Used for resource tagging
    Type: String
  SSH:
    Description: Enter your public IP address
    Type: String
  sshKey:
    Default: matt.empson
    Description: SSH Key Pair Name
    Type: String
Resources:
  Cloudfront:
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'false'
          TargetOriginId: '1'
          ViewerProtocolPolicy: allow-all
        Enabled: 'true'
        HttpVersion: http2
        Origins:
          - DomainName: cloudfrontbucket-785271490484687.s3-ap-southeast-2.amazonaws.com
            Id: '1'
            S3OriginConfig: {}
    Type: AWS::CloudFront::Distribution
  IGW:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -IGW
    Type: AWS::EC2::InternetGateway
  InboundDeny:
    Properties:
      CidrBlock: '0.0.0.0/0'
      NetworkAclId: !Ref 'NACL'
      Protocol: -1
      RuleAction: deny
      RuleNumber: 10
    Type: AWS::EC2::NetworkAclEntry
  InstanceProfile:
    Properties:
      Roles:
        - !Ref 'S3Role'
    Type: AWS::IAM::InstanceProfile
  JumpBox:
    Properties:
      ImageId: ami-0b8b10b5bf11f3a22
      InstanceType: t2.micro
      KeyName: !Ref 'sshKey'
      SecurityGroupIds:
        - !Ref 'SecurityGroup'
      SubnetId: !Ref 'Subnet1'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -jump-box
    Type: AWS::EC2::Instance
  NACL:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -NACL-PUBLIC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  NATAllowIN:
    Properties:
      CidrIp: 10.0.0.0/16
      Description: VPC CIDR
      FromPort: -1
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: '-1'
      ToPort: -1
    Type: AWS::EC2::SecurityGroupIngress
  NATAllowOUT:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: -1
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: '-1'
      ToPort: -1
    Type: AWS::EC2::SecurityGroupEgress
  NatInstance:
    Properties:
      ImageId: ami-0f113fc1f0244a121
      InstanceType: t2.micro
      KeyName: !Ref 'sshKey'
      SecurityGroupIds:
        - !Ref 'NatSecurityGroup'
      SubnetId: !Ref 'Subnet1'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -nat
    Type: AWS::EC2::Instance
  NatSecurityGroup:
    Properties:
      GroupDescription: NAT-SG
      GroupName: nat
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -nat-instance
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  OutBoundAllow:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'NACL'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 10
    Type: AWS::EC2::NetworkAclEntry
  PrivateInboundAllow:
    Properties:
      CidrBlock: '0.0.0.0/0'
      NetworkAclId: !Ref 'PrivateNACL'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 10
    Type: AWS::EC2::NetworkAclEntry
  PrivateNACL:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -NACL-PRIVATE
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  PrivateOutBoundAllow:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: 'true'
      NetworkAclId: !Ref 'PrivateNACL'
      Protocol: -1
      RuleAction: allow
      RuleNumber: 10
    Type: AWS::EC2::NetworkAclEntry
  PrivateRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -PRIVATE
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnetRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref 'NatInstance'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -PUBLIC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  S3AllowOUT:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: -1
      GroupId: !Ref 'S3SecurityGroup'
      IpProtocol: '-1'
      ToPort: -1
    Type: AWS::EC2::SecurityGroupEgress
  S3Instance:
    Properties:
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: ami-0b8b10b5bf11f3a22
      InstanceType: t2.micro
      KeyName: !Ref 'sshKey'
      SecurityGroupIds:
        - !Ref 'S3SecurityGroup'
      SubnetId: !Ref 'Subnet4'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -S3-instance
    Type: AWS::EC2::Instance
  S3NATAllowIN:
    Properties:
      CidrIp: 10.0.0.0/16
      Description: VPC CIDR
      FromPort: -1
      GroupId: !Ref 'S3SecurityGroup'
      IpProtocol: '-1'
      ToPort: -1
    Type: AWS::EC2::SecurityGroupIngress
  S3Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Condition:
                  IpAddress:
                    aws:SourceIp: 10.0.0.0/16
                Effect: Allow
                Resource:
                  - arn:aws:s3:::namebucket-*/*
                Sid: S3Policy
          PolicyName: S3Policy
      RoleName: S3Role
    Type: AWS::IAM::Role
  S3SecurityGroup:
    Properties:
      GroupDescription: S3-SG
      GroupName: S3
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -S3-instance
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  SGICMPAllow:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: -1
      GroupId: !Ref 'SecurityGroup'
      IpProtocol: '1'
      ToPort: -1
    Type: AWS::EC2::SecurityGroupEgress
  SGSSHAllow:
    Properties:
      CidrIp: !Join
        - ''
        - - !Ref 'SSH'
          - /32
      Description: !Join
        - ''
        - - !Ref 'Name'
          - s source IP
      FromPort: 22
      GroupId: !Ref 'SecurityGroup'
      IpProtocol: '6'
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  SSHAllow:
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'SSH'
          - /32
      NetworkAclId: !Ref 'NACL'
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 20
    Type: AWS::EC2::NetworkAclEntry
  SecurityGroup:
    Properties:
      GroupDescription: Jump-Box-SG
      GroupName: jumpbox
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -jump-box
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  Subnet0:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 10.0.0.0/24-PUBLIC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet0NACL:
    Properties:
      NetworkAclId: !Ref 'NACL'
      SubnetId: !Ref 'Subnet0'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet0RT:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'Subnet0'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet1:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 10.0.1.0/24-PUBLIC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet1NACL:
    Properties:
      NetworkAclId: !Ref 'NACL'
      SubnetId: !Ref 'Subnet1'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet1RT:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'Subnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet2:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 10.0.2.0/24-PUBLIC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet2NACL:
    Properties:
      NetworkAclId: !Ref 'NACL'
      SubnetId: !Ref 'Subnet2'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet2RT:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'Subnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet4:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: 10.0.4.0/24-PRIVATE
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet4NACL:
    Properties:
      NetworkAclId: !Ref 'PrivateNACL'
      SubnetId: !Ref 'Subnet4'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet4RT:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'Subnet4'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet5:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: 10.0.5.0/24-PRIVATE
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet5NACL:
    Properties:
      NetworkAclId: !Ref 'PrivateNACL'
      SubnetId: !Ref 'Subnet5'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet5RT:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'Subnet5'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet6:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.6.0/24
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: 10.0.6.0/24-PRIVATE
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  Subnet6NACL:
    Properties:
      NetworkAclId: !Ref 'PrivateNACL'
      SubnetId: !Ref 'Subnet6'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet6RT:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'Subnet6'
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'Name'
              - -VPC
    Type: AWS::EC2::VPC
  cloudfrontBucket:
    Properties:
      AccessControl: Private
      BucketName: cloudfrontbucket-785271490484687
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      Tags:
        - Key: Name
          Value: cloudfrontBucket-785271490484687
    Type: AWS::S3::Bucket
  nameBucket:
    Properties:
      AccessControl: Private
      BucketName: namebucket-670043222047513
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      Tags:
        - Key: Name
          Value: nameBucket-670043222047513
    Type: AWS::S3::Bucket
